apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

import org.gradle.api.tasks.testing.logging.TestLogEvent

// See https://medium.com/@cesarmcferreira/gradle-tips-tricks-to-survive-the-zombie-apocalypse-3dd996604341#.myf6bg50h
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
        def versionMinor = versionProps['VERSION_MINOR'].toInteger()
        def versionBuild = versionProps['VERSION_BUILD'].toInteger()
        def versionNumber = versionMajor * 10000 + versionMinor * 1000 + versionBuild

        defaultConfig {
            applicationId "com.nichesoftware.giftlist"
            minSdkVersion rootProject.ext.minSdkVersion
            targetSdkVersion rootProject.ext.targetSdkVersion
            versionCode versionNumber
            versionName "${versionMajor}.${versionMinor} (${versionBuild})"
            // Needed with Firebase
            // multiDexEnabled true

            // Gradle Plugin 1.5
            // disable limited support for vector drawables for Android Studio 1.4
            // generatedDensities = ['xxhdpi', 'xhdpi', 'hdpi']

            // Gradle Plugin 2.0
            vectorDrawables.useSupportLibrary = true
        }
    } else {
        throw new GradleException("Could not read version.properties !")
    }

    // Gradle Plugin 1.5
    // disable limited support for vector drawables for Android Studio 1.4
//    aaptOptions {
//        additionalParameters "--no-version-vectors"
//    }

    buildTypes {
        release {
            minifyEnabled true
			// Source: http://tools.android.com/tech-docs/new-build-system/resource-shrinking
            shrinkResources true
			
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            // Permit to fasten build (gradle plugin pre-dex each module)
            minSdkVersion 21
            applicationIdSuffix = ".mock"
            buildConfigField    "String",   "BASE_URL",     "\"http://localhost/giftlist/\""
        }
        prod {
//            buildConfigField    "String",   "BASE_URL",     "\"http://192.168.1.65:8080/giftlist/\""
            buildConfigField    "String",   "BASE_URL",     "\"http://192.168.56.1:8080/\""
        }
    }

    android.variantFilter { variant ->
        // Remove mockRelease as it's not needed.
        if(variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true);
        }
    }

    testOptions {
        // "Method ... not mocked." (See: http://tools.android.com/tech-docs/unit-testing-support#TOC-Method)
        unitTests.returnDefaultValues = true
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// Unit tests output directly to the console
tasks.matching {it instanceof Test}.all {
    println(':Test ' + it)
    testLogging.events = [TestLogEvent.FAILED,
                          TestLogEvent.PASSED,
                          TestLogEvent.SKIPPED,
                          TestLogEvent.STANDARD_ERROR,
                          TestLogEvent.STANDARD_OUT]
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile group: 'com.android.support',     name: 'appcompat-v7',            version: rootProject.ext.supportLibVersion
    compile group: 'com.android.support',     name: 'recyclerview-v7',         version: rootProject.ext.supportLibVersion
    compile group: 'com.android.support',     name: 'cardview-v7',             version: rootProject.ext.supportLibVersion
    compile group: 'com.android.support',     name: 'design',                  version: rootProject.ext.supportLibVersion
    compile group: 'com.android.support',     name: 'support-vector-drawable', version: rootProject.ext.supportLibVersion
    compile group: 'com.android.support',     name: 'support-core-utils',      version: rootProject.ext.supportLibVersion
    // Retrofit
    compile         group: 'com.squareup.retrofit2',  name: 'retrofit',                version: rootProject.ext.retrofitVersion
    compile         group: 'com.squareup.retrofit2',  name: 'converter-gson',          version: rootProject.ext.retrofitVersion
    compile         group: 'com.squareup.retrofit2',  name: 'converter-scalars',       version: rootProject.ext.retrofitVersion
    compile         group: 'com.squareup.retrofit2',  name: 'adapter-rxjava2',         version: rootProject.ext.retrofitVersion
    debugCompile    group: 'com.squareup.retrofit2',  name: 'retrofit-mock',           version: rootProject.ext.retrofitVersion
    compile         group: 'com.squareup.okhttp3',    name: 'okhttp',                  version: rootProject.ext.okHttpVersion
    compile         group: 'com.squareup.okhttp3',    name: 'logging-interceptor',     version: rootProject.ext.okHttpVersion
    // CircularImageView
    compile group: 'de.hdodenhof', name: 'circleimageview', version: '2.0.0'
    // googlei18n / libphonenumber
    compile group: 'com.googlecode.libphonenumber', name: 'libphonenumber', version: '7.4.3'
    // Firebase (GCM)
    compile group: 'com.google.firebase',       name: 'firebase-messaging', version: rootProject.ext.playServicesVersion
    compile group: "com.google.android.gms",    name: 'play-services-gcm',  version: rootProject.ext.playServicesVersion
    // Picasso
    compile group: 'com.squareup.picasso', name: 'picasso', version: '2.5.2'
    // ButterKnife
    annotationProcessor group: 'com.jakewharton', name: 'butterknife-compiler', version: rootProject.ext.butterKnifeVersion
    compile             group: 'com.jakewharton', name: 'butterknife',          version: rootProject.ext.butterKnifeVersion
    // RX
    compile group: 'io.reactivex.rxjava2',      name: 'rxjava',                 version: '2.0.2'
    compile group: 'io.reactivex.rxjava2',      name: 'rxandroid',              version: '2.0.1'

    // Test
    testCompile group: 'junit',         name: 'junit',                      version: rootProject.ext.junitVersion
    testCompile group: 'org.mockito',   name: 'mockito-all',                version: rootProject.ext.mockitoVersion
    testCompile group: 'org.powermock', name: 'powermock-module-junit4',    version: rootProject.ext.powerMockVersion
    testCompile group: 'org.powermock', name: 'powermock-api-mockito',      version: rootProject.ext.powerMockVersion
}

// Auto increment build version
// Sources:  - http://bryankrosenbaum.com/2013/11/27/getting-to-know-gradle-auto-increment-version-and-signing-releases/
//           - http://stackoverflow.com/questions/21405457/autoincrement-versioncode-with-gradle-extra-properties
task incrementVersion << {
    println(":incrementVersion - Incrementing Version...")

    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))
        // Increment version build
        def versionBuild = versionProps['VERSION_BUILD'].toInteger()
        println(":incrementVersion - current versionCode=" + versionBuild.toString());
        versionBuild += 1
        println(":incrementVersion - next versionCode=" + versionBuild.toString());
        // Store it
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties !")
    }
    println(":incrementVersion - Version incremented...")
}

build.dependsOn 'incrementVersion'

// Le plug-in de services Google pour Gradle charge le fichier google-services.json
apply plugin: 'com.google.gms.google-services'

// Disable google-services plugin for a given flavor
//+ (@see http://stackoverflow.com/questions/37693732/can-i-disable-firebase-plugin-for-specific-flavor)
android.applicationVariants.all { variant ->
    if (variant.name.contains("mock")) {
        project.tasks.each { t ->
            if (t.name.contains("GoogleServices")) {
                // Remove google services plugin
                variant.getVariantData().resourceGenTask.getTaskDependencies().values.remove(t);
            }
        }
    }
}